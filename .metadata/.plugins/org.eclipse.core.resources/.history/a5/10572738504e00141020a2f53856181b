package br.usjt.aepn2012.cardroiduino.ui;

import java.util.Set; 

import br.usjt.aepn2012.cardroiduino.R; 
import br.usjt.aepn2012.cardroiduino.utils.SystemProperties; 
import android.app.Activity; 
import android.bluetooth.BluetoothAdapter; 
import android.bluetooth.BluetoothDevice; 
import android.content.BroadcastReceiver; 
import android.content.Context; 
import android.content.Intent; 
import android.content.IntentFilter; 
import android.os.Bundle; 
import android.util.Log; 
import android.view.View; 
import android.view.Window; 
import android.view.View.OnClickListener; 
import android.widget.AdapterView; 
import android.widget.ArrayAdapter; 
import android.widget.Button; 
import android.widget.ListView; 
import android.widget.TextView; 
import android.widget.AdapterView.OnItemClickListener; 

/** 
  * <P> 
  * <B> Description: </ b> 
  * <br> 
  * <P> This Activity Appears to the dialog. The paired devices list 
  * And detected after the discovery. When the selected device 
  * By the user's MAC address of the device returned to the Activity 
  * They're called, the result Intent 
  * </ P> 
  * / 
public class extends Activity {DeviceBluetoothListActivity 
    
/ ** 
* Constants for Debugging the Application 
* / 
private static final String TAG = "DeviceListActivity"; 
     private static final boolean D = true; 

     / ** 
      * Hold the object to Bluetooth Adapter 
      * / 
     private BluetoothAdapter mBtAdapter; 
    
     / ** 
      * Array Adapter que will contain the MAC addresses of the devices paired 
      * / 
     private ArrayAdapter <String> mPairedDevicesArrayAdapter; 
    
     / ** 
      * Array Adapter que will contain the new MAC addresses of devices found by 
      * Bluetooth Search 
      * / 
     private ArrayAdapter <String> mNewDevicesArrayAdapter; 

     / ** 
      * First method to run after the constructor 
      * / 
     Override 
     protected void onCreate (Bundle savedInstanceState) {
     
     // ************************************************ * 
     // Performs omtodo first inherited class (Upper class - extends) 
         super.onCreate (savedInstanceState); 

         // ************************************************ * 
         // Performs the Setup Activity of determining the characteristic of the screen 
         requestWindowFeature (Window.FEATURE_INDETERMINATE_PROGRESS); 
        
         // ************************************************ * 
         // Setting which Layout (XML) associated with this Activity -> CarDroiDuino \ res \ layout 
         setContentView (R.layout.bluedevicelist_layout); 

         // ************************************************ * 
         Return CANCELED // setting as Default as to if the user leaves the 
         // Activity without selecting a MAC Address 
         setResult (Activity.RESULT_CANCELED); 

        
         // ************************************************ * 
         // Booting the button to go booting the discovery of new devices 
         ScanButton button = (Button) findViewById (R.id.button_scan); 
         scanButton.setOnClickListener (new OnClickListener () {
             public void onClick (View v) {
             // ************************************************ * 
             // Call Routine that looks for new devices 
                 doDiscovery (); 
                 // ************************************************ * 
                 Some // with the progress screen 
                 v.setVisibility (View.GONE); 
             } 
         }); 

         // ************************************************ * 
         Starting // ArrayAdapters to contain the MAC Address of Devices 
         // A j to paired devices and other devices found to 
         mPairedDevicesArrayAdapter = new ArrayAdapter <String> (this, R.layout.device_name); 
         mNewDevicesArrayAdapter = new ArrayAdapter <String> (this, R.layout.device_name); 

         // ************************************************ * 
         // Getting the ListView to go list paired devices and associandor 
         // The ArrayAdapter for him 
         ListView pairedListView = (ListView) findViewById (R.id.paired_devices); 
         pairedListView.setAdapter (mPairedDevicesArrayAdapter); 
         // ************************************************ * 
         // Associates to act of the user touching the line of the ListView to a specific event
         // To capture the selected MAC address 
         pairedListView.setOnItemClickListener (mDeviceClickListener); 

         // ************************************************ * 
         // Getting the ListView to go list the devices found and associandor 
         // The ArrayAdapter for him 
         ListView newDevicesListView = (ListView) findViewById (R.id.new_devices); 
         newDevicesListView.setAdapter (mNewDevicesArrayAdapter); 
         // ************************************************ * 
         // Associates to act of the user touching the line of the ListView to a specific event
         // To capture the selected MAC address 
         newDevicesListView.setOnItemClickListener (mDeviceClickListener); 

         // ************************************************ * 
         Register // BroadcastReceiver to run when a new device is 
         // encontraado 
         IntentFilter filter = new IntentFilter (BluetoothDevice.ACTION_FOUND); 
         this.registerReceiver (mReceiver, filter); 

         // ************************************************ * 
         // Register to run the BroadcastReceiver when Bluetooth finished 
         // Search for devices 
         filter = new IntentFilter (BluetoothAdapter.ACTION_DISCOVERY_FINISHED); 
         this.registerReceiver (mReceiver, filter); 
        
         // ************************************************ * 
         // Capturing the local Bluetooth adapter 
         mBtAdapter BluetoothAdapter.getDefaultAdapter = (); 

         // ************************************************ * 
         // Capturing the list of devices already paired with the Bluetooth Adapter 
         Set <BluetoothDevice> pairedDevices mBtAdapter.getBondedDevices = (); 

         // ************************************************ * 
         // If you have paired devices handle one by one and adds to the ArrayAdapter 
         // Devices already paired. The contrary shoves a String saying that no one has the paired 
         if (pairedDevices.size ()> 0) {
             findViewById (R.id.title_paired_devices) .setVisibility (View.VISIBLE); 
             for (device BluetoothDevice: pairedDevices) {
                 mPairedDevicesArrayAdapter.add (device.getName () + "\ n" + device.getAddress ()); 
             } 
         } Else {
             Nodevices String = getResources () getText (R.string.none_paired) toString ().;
             mPairedDevicesArrayAdapter.add (nodevices); 
         } 
     } 

     / ** 
      * Event triggered when the Activity destroyed 
      * For the discovery of Bluetooth and unset the BroadCast who received messages 
      * Operating System 
      * / 
     Override 
     protected void onDestroy () {
     // ************************************************ * 
     // Performs omtodo first senior class (extends) 
         super.onDestroy (); 

         // ************************************************ * 
         // If you are still discovering devices then the whole process 
         if (mBtAdapter! = null) {
             mBtAdapter.cancelDiscovery (); 
         } 

         // ************************************************ * 
         // Unregister BroadcastReceiver that the received messages Operating System 
         this.unregisterReceiver (mReceiver); 
     } 

     / ** 
      * Starts the discovery of Bluetooth devices around 
      * / 
     private void doDiscovery () {
         if (D) Log.d (TAG, "doDiscovery ()"); 

         // ************************************************ * 
         // Enables the progress bar to show the usurio who is trying to discover devices 
         setProgressBarIndeterminateVisibility (true); 
         setTitle (R.string.scanning); 

         // ************************************************ * 
         // Displaying the Title of New ListView devices to new devices 
         findViewById (R.id.title_new_devices) .setVisibility (View.VISIBLE); 

        
         // ************************************************ * 
         // If the discovery is already rolling then for him 
         if (mBtAdapter.isDiscovering ()) {
             mBtAdapter.cancelDiscovery (); 
         } 

         // ************************************************ * 
         Calls to // adapter that start hunt devices around 
         mBtAdapter.startDiscovery (); 
     } 

     /** 
      * Event fired when the user selects any of the devices in 
      * Two lists of devices - Get the MAC address of the selected device 
      * And returns to CarServerActivity 
      * / 
     private OnItemClickListener mDeviceClickListener = new OnItemClickListener () {
         public void onItemClick (AdapterView <?> av, View v, int arg2, long arg3) {
         // ************************************************ * 
         // Cancels discovery 
             mBtAdapter.cancelDiscovery (); 

             // ************************************************ * 
             // Get MAC Address String contained in the selected 
             String info = ((TextView) v) .getText () toString ().; 
             String address = info.substring (info.length () - 17); 

             // ************************************************ * 
             // Create the result Intent and adds the MAC address selected him 
             Intent intent = new Intent (); 
             intent.putExtra (SystemProperties.KEY_DEVICE_ADDRESS, address); 

             // ************************************************ * 
             /// Indicates that the result is valid to be sent - OK 
             setResult (Activity.RESULT_OK, intent); 
            
             // ************************************************ * 
             // Terminates this Activity sending returns CarServerActivity 
             Finish (); 
         } 
     }; 

     / ** 
      * Event fired when a new device found or when the discovery 
      * New devices finalized 
      * / 
     private final BroadcastReceiver mReceiver = new BroadcastReceiver () {
         Override 
         public void OnReceive (Context context, Intent intent) {
         
         // ************************************************ * 
         // Capture the action triggered by the identification system 
             Intent.getAction String action = (); 

            
             // ************************************************ * 
             // If the event is the discovery of a new device ... 
             if (BluetoothDevice.ACTION_FOUND.equals (action)) {
             // ************************************************ * 
             // Get informed by Intent device 
                 BluetoothDevice device = intent.getParcelableExtra (BluetoothDevice.EXTRA_DEVICE); 
                 // ************************************************ * 
                 // If the device is still on the paired then adds it to the ArrayAdapter of discovered devices 
                 if (device.getBondState ()! = BluetoothDevice.BOND_BONDED) {
                     mNewDevicesArrayAdapter.add (device.getName () + "\ n" + device.getAddress ()); 
                 } 
             // ************************************************ * 
             // If the event is to inform the order of discovery for new devices ... 
             } Else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals (action)) {
             // ************************************************ * 
             Some // with Progress Bar 
                 setProgressBarIndeterminateVisibility (false); 
                 // ************************************************ * 
                 // Change the title to ask the user to select a device 
                 setTitle (R.string.select_device); 
                 // ************************************************ * 
                 // If the device was discovered some then puts a message informing the ListView 
                 // That the search turned up nothing 
                 if (mNewDevicesArrayAdapter.getCount () == 0) {
                     Nodevices String = getResources () getText (R.string.none_found) toString ().; 
                     mNewDevicesArrayAdapter.add (nodevices); 
                 } 
             } 
         } 
     }; 

}