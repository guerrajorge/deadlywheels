package groupa.deadlywheels.carcontrol;


import groupa.deadlywheels.core.CarDroiDuinoCore;
import groupa.deadlywheels.utils.SystemProperties;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.SocketException;

import android.os.Handler;
import android.util.Log;
import android.widget.TextView;

import groupa.deadlywheels.ui.CarControlActivity;

public class DatagramSocketArduinoWorker implements Runnable{

	/**
	 * Core System - Prov Queues for Data Exchange between System Threads
	 */
	private CarDroiDuinoCore systemCore;

	/**
	 * Socket for connection via UPD with Server and receipt of Frames
	 */
	private DatagramSocket datagramSocket;
	/**
	 * Looping Control of Thread
	 */
	private boolean isOn = false;
	
	static String SERVER_IP;
	static final int SERVER_PORT = 5000;
	
	Handler handler = new Handler();
	ServerSocket serverSocket;
	
	TextView servertextview;
	
	public DatagramSocketArduinoWorker(CarDroiDuinoCore systemCore,
			int clientPort) throws SocketException {
		this.systemCore = systemCore;
		// **********************************************
		// Booting Datagram connection
		this.datagramSocket = new DatagramSocket(clientPort);
		// **********************************************
		this.isOn = true;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {
			if (SERVER_IP != null) {
				handler.post(new Runnable() {
					@Override
					public void run() {
						textView1.setText(textView1.getText()
								+ "Server listening on IP: " + SERVER_IP
								+ "\n");
					}
				});

				//---create an instance of the server socket---
				serverSocket = new ServerSocket(SERVER_PORT);

				while (true) {
					//---wait for incoming clients---
					Socket client = serverSocket.accept();

					//---the above code is a blocking call;
					// i.e. it will block until a client connects---

					//---client has connected---
					handler.post(new Runnable() {
						@Override
						public void run() {
							textView1.setText(textView1.getText()
									+ "Connected to client." + "\n");
						}
					});

					try {
						//---get an InputStream object to read from the
						// socket---
						BufferedReader br = new BufferedReader(
								new InputStreamReader(
										client.getInputStream()));

						OutputStream outputStream = 
								client.getOutputStream();

						//---read all incoming data terminated with a \n
						// char---
						String line = null;
						while ((line = br.readLine()) != null) {
							final String strReceived = line;

							//---send whatever you received back to the
							// client---
							String s = line + "\n";
							outputStream.write(s.getBytes());
							
							handler.post(new Runnable() {
								@Override
								public void run() {
									textView1.setText(textView1.getText()
											+ strReceived + "\n");
								}
							});
						}

						//---client has disconnected from the server---
						handler.post(new Runnable() {
							@Override
							public void run() {
								textView1.setText(textView1.getText()
										+ "Client disconnected." + "\n");
							}
						});
						
					} catch (Exception e) {
						final String error = e.getLocalizedMessage();
						handler.post(new Runnable() {
							@Override
							public void run() {
								textView1.setText(textView1.getText()
										+ error);
							}
						});							
					}
				}
			} else {
				handler.post(new Runnable() {
					@Override
					public void run() {
						textView1.setText(textView1.getText()
								+ "No internet connection on device."
								+ "\n");
					}
				});
			}
		} catch (Exception e) {
			final String error = e.getLocalizedMessage();
			handler.post(new Runnable() {
				@Override
				public void run() {
					textView1.setText(textView1.getText() + error + "\n");
				}
			});
		}
		
		handler.post(new Runnable() {
			@Override
			public void run() {
				textView1.setText(textView1.getText() + "\n" + "Server exited"
						+ "\n");
			}
		});

		
	}
	
	/**
	 * Thread the ends of communication
	 */
	public void turnOff() {
		this.isOn = false;
		try {
			this.datagramSocket.disconnect();
			this.datagramSocket.close();
		} catch (Exception ex) {
			Log.e("DatagramSocketClientReceiverWorker - Exception",
					ex.getMessage());
		}
	}

}
