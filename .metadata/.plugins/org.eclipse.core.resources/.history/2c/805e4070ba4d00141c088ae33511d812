package br.usjt.aepn2012.cardroiduino.carcontrol;

import java.io.IOException;
import java.net.SocketException;
import java.net.UnknownHostException;

import br.usjt.aepn2012.cardroiduino.core.CarDroiDuinoCore;

/**
 * Class that implements the Gate of communication via UPD ( Socket ) for Remote
 * Cart Starts Working Threads for sending commands and receiving of video
 * frames
 * 
 */
public class DatagramSocketClientGate {

	/**
	 * Core System for Sharing Data Between Threads
	 */
	private CarDroiDuinoCore systemCore;

	/**
	 * IP address of the server for connection Cart
	 */
	private String serverIPAddress;

	/**
	 * Port that will be used by the Client to receive the video frames Even
	 * port number used by the Server for receiving control data
	 */
	private int clientServerPort;

	/**
	 * Status of the Gate
	 */
	private boolean isInitialized = false;

	/**
	 * Worker responsible for, the receipt of frames and video routing Of the
	 * Core System
	 */
	private DatagramSocketClientReceiverWorker datagramSocketClientReceiverWorker;

	/**
	 * Thread that will trigger the Worker Receiving
	 */
	private Thread datagramSocketClientReceiverThread;

	/**
	 * Worker responsible for sending the Data Control to Cart Server through
	 * the core
	 */
	private DatagramSocketClientSenderWorker datagramSocketClientSenderWorker;

	/**
	 * Thread that will trigger the Worker Shipping
	 */
	private Thread datagramSocketClientSenderThread;

	/**
	 * Creates a new instance the SocketClientGate
	 * 
	 * @Param systemCore Core System
	 * @Param ServerIPAddress IP Address Server
	 * @Param clientServerPort Port for sending data to the Receiving Server and
	 *        Frames
	 * @throws UnknownHostException
	 * @throws IOException
	 */
	public DatagramSocketClientGate(CarDroiDuinoCore systemCore,
			String serverIPAddress, int clientServerPort)
			throws UnknownHostException, IOException {
		// *************************************************
		// Setting the Gate
		this.systemCore = systemCore;
		this.serverIPAddress = serverIPAddress;
		this.clientServerPort = clientServerPort;
		// *************************************************
		// Making the initialization of Threads
		this.setupSocketGate();
	}

	/**
	 * Initializes the connection TCP / IP and the Workers ( Workers ) to E
	 * Receive data from the Server Cart
	 * 
	 * @throws SocketException
	 */
	private void setupSocketGate() throws SocketException {
		// *************************************************
		// If the connection was made , then creates the object of that Worker
		// Thread
		// Receive frames Video
		this.datagramSocketClientReceiverWorker = new DatagramSocketClientReceiverWorker(
				this.systemCore, this.clientServerPort);
		// *************************************************
		// Object creates the worker thread that sent the data Control the Car
		this.datagramSocketClientSenderWorker = new DatagramSocketClientSenderWorker(
				this.systemCore, this.serverIPAddress, this.clientServerPort);

		// *************************************************
		// Inicia as Threads para que elas comecem seus Trabalhos
		this.datagramSocketClientReceiverThread = new Thread(
				this.datagramSocketClientReceiverWorker);
		this.datagramSocketClientReceiverThread.start();

		this.datagramSocketClientSenderThread = new Thread(
				this.datagramSocketClientSenderWorker);
		this.datagramSocketClientSenderThread.start();

		// *************************************************
		// Flag de Status do Gate para Inicializado
		this.isInitialized = true;
	}

	/**
	 * Retornar o Status do Gate
	 * 
	 * @return Status do Gate
	 */
	public boolean isSocketGateInitialized() {
		return this.isInitialized;
	}

	/**
	 * Desliga o Gate matando as Threads Trabalhadoras
	 */
	public void turnOff() {
		// **************************************************
		// Verifica se n�o foi finalizada ou mesmo n�o foi inicializada
		if (!this.isInitialized)
			return;

		// **************************************************
		// Seta a flag para n�o inicializado para evitar null exception
		this.isInitialized = false;

		// **************************************************
		// Controle para Terminar as Threads
		boolean retry = true;
		// **************************************************
		// Termina os loopings das Threads
		this.datagramSocketClientReceiverWorker.turnOff();
		this.datagramSocketClientSenderWorker.turnOff();
		// **************************************************
		// Tenta matar a Thread de recebimento na FACA!!!
		while (retry) {
			try {
				this.datagramSocketClientReceiverThread.join();
				retry = false;
			} catch (InterruptedException e) {
			}
		}
		// **************************************************
		// Reutilizando a Flag-- Isso � errado... mas fazer o que?
		retry = true;
		// **************************************************
		// Tenta matar a Thread de envio na BALA!!!!
		while (retry) {
			try {
				this.datagramSocketClientSenderThread.join();
				retry = false;
			} catch (InterruptedException e) {
			}
		}
	}
}
